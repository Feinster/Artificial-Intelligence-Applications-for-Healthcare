import numpy as np
from scipy.stats import entropy, skew, kurtosis

# Function to extract features from actigraphy data
# The following features are extracted: Mean, Median, Variance, Standard Deviation, Maximum, Minimum, Entropy, Skew, Kurtosis, Interquartile range, and Mean Absolute Deviation
def extract_actigraphy_features(actigraphy_data):
    features = {
        'mean_axis1': np.mean(actigraphy_data['Axis1']),
        'mean_axis2': np.mean(actigraphy_data['Axis2']),
        'mean_axis3': np.mean(actigraphy_data['Axis3']),
        'mean_steps': np.mean(actigraphy_data['Steps']),
        'mean_hr': np.mean(actigraphy_data['HR']),
        'mean_inclinometer_off': np.mean(actigraphy_data['Inclinometer Off']),
        'mean_inclinometer_standing': np.mean(actigraphy_data['Inclinometer Standing']),
        'mean_inclinometer_sitting': np.mean(actigraphy_data['Inclinometer Sitting']),
        'mean_inclinometer_lying': np.mean(actigraphy_data['Inclinometer Lying']),
        'mean_vector_magnitude': np.mean(actigraphy_data['Vector Magnitude']),
        'median_axis1': np.median(actigraphy_data['Axis1']),
        'median_axis2': np.median(actigraphy_data['Axis2']),
        'median_axis3': np.median(actigraphy_data['Axis3']),
        'median_steps': np.median(actigraphy_data['Steps']),
        'median_hr': np.median(actigraphy_data['HR']),
        'median_inclinometer_off': np.median(actigraphy_data['Inclinometer Off']),
        'median_inclinometer_standing': np.median(actigraphy_data['Inclinometer Standing']),
        'median_inclinometer_sitting': np.median(actigraphy_data['Inclinometer Sitting']),
        'median_inclinometer_lying': np.median(actigraphy_data['Inclinometer Lying']),
        'median_vector_magnitude': np.median(actigraphy_data['Vector Magnitude']),
        'var_axis1': np.var(actigraphy_data['Axis1']),
        'var_axis2': np.var(actigraphy_data['Axis2']),
        'var_axis3': np.var(actigraphy_data['Axis3']),
        'var_steps': np.var(actigraphy_data['Steps']),
        'var_hr': np.var(actigraphy_data['HR']),
        'var_inclinometer_off': np.var(actigraphy_data['Inclinometer Off']),
        'var_inclinometer_standing': np.var(actigraphy_data['Inclinometer Standing']),
        'var_inclinometer_sitting': np.var(actigraphy_data['Inclinometer Sitting']),
        'var_inclinometer_lying': np.var(actigraphy_data['Inclinometer Lying']),
        'var_vector_magnitude': np.var(actigraphy_data['Vector Magnitude']),
        'std_axis1': np.std(actigraphy_data['Axis1']),
        'std_axis2': np.std(actigraphy_data['Axis2']),
        'std_axis3': np.std(actigraphy_data['Axis3']),
        'std_steps': np.std(actigraphy_data['Steps']),
        'std_hr': np.std(actigraphy_data['HR']),
        'std_inclinometer_off': np.std(actigraphy_data['Inclinometer Off']),
        'std_inclinometer_standing': np.std(actigraphy_data['Inclinometer Standing']),
        'std_inclinometer_sitting': np.std(actigraphy_data['Inclinometer Sitting']),
        'std_inclinometer_lying': np.std(actigraphy_data['Inclinometer Lying']),
        'std_vector_magnitude': np.std(actigraphy_data['Vector Magnitude']),
        'max_axis1': np.max(actigraphy_data['Axis1']),
        'max_axis2': np.max(actigraphy_data['Axis2']),
        'max_axis3': np.max(actigraphy_data['Axis3']),
        'max_steps': np.max(actigraphy_data['Steps']),
        'max_hr': np.max(actigraphy_data['HR']),
        'max_inclinometer_off': np.max(actigraphy_data['Inclinometer Off']),
        'max_inclinometer_standing': np.max(actigraphy_data['Inclinometer Standing']),
        'max_inclinometer_sitting': np.max(actigraphy_data['Inclinometer Sitting']),
        'max_inclinometer_lying': np.max(actigraphy_data['Inclinometer Lying']),
        'max_vector_magnitude': np.max(actigraphy_data['Vector Magnitude']),
        'min_axis1': np.min(actigraphy_data['Axis1']),
        'min_axis2': np.min(actigraphy_data['Axis2']),
        'min_axis3': np.min(actigraphy_data['Axis3']),
        'min_steps': np.min(actigraphy_data['Steps']),
        'min_hr': np.min(actigraphy_data['HR']),
        'min_inclinometer_off': np.min(actigraphy_data['Inclinometer Off']),
        'min_inclinometer_standing': np.min(actigraphy_data['Inclinometer Standing']),
        'min_inclinometer_sitting': np.min(actigraphy_data['Inclinometer Sitting']),
        'min_inclinometer_lying': np.min(actigraphy_data['Inclinometer Lying']),
        'min_vector_magnitude': np.min(actigraphy_data['Vector Magnitude']),
        'entropy_axis1': entropy(actigraphy_data['Axis1']),
        'entropy_axis2': entropy(actigraphy_data['Axis2']),
        'entropy_axis3': entropy(actigraphy_data['Axis3']),
        'entropy_steps': entropy(actigraphy_data['Steps']),
        'entropy_hr': entropy(actigraphy_data['HR']),
        'entropy_inclinometer_off': entropy(actigraphy_data['Inclinometer Off']),
        'entropy_inclinometer_standing': entropy(actigraphy_data['Inclinometer Standing']),
        'entropy_inclinometer_sitting': entropy(actigraphy_data['Inclinometer Sitting']),
        'entropy_inclinometer_lying': entropy(actigraphy_data['Inclinometer Lying']),
        'entropy_vector_magnitude': entropy(actigraphy_data['Vector Magnitude']),
        'skew_axis1': skew(actigraphy_data['Axis1']),
        'skew_axis2': skew(actigraphy_data['Axis2']),
        'skew_axis3': skew(actigraphy_data['Axis3']),
        'skew_steps': skew(actigraphy_data['Steps']),
        'skew_hr': skew(actigraphy_data['HR']),
        'skew_inclinometer_off': skew(actigraphy_data['Inclinometer Off']),
        'skew_inclinometer_standing': skew(actigraphy_data['Inclinometer Standing']),
        'skew_inclinometer_sitting': skew(actigraphy_data['Inclinometer Sitting']),
        'skew_inclinometer_lying': skew(actigraphy_data['Inclinometer Lying']),
        'skew_vector_magnitude': skew(actigraphy_data['Vector Magnitude']),
        'kurtosis_axis1': kurtosis(actigraphy_data['Axis1']),
        'kurtosis_axis2': kurtosis(actigraphy_data['Axis2']),
        'kurtosis_axis3': kurtosis(actigraphy_data['Axis3']),
        'kurtosis_steps': kurtosis(actigraphy_data['Steps']),
        'kurtosis_hr': kurtosis(actigraphy_data['HR']),
        'kurtosis_inclinometer_off': kurtosis(actigraphy_data['Inclinometer Off']),
        'kurtosis_inclinometer_standing': kurtosis(actigraphy_data['Inclinometer Standing']),
        'kurtosis_inclinometer_sitting': kurtosis(actigraphy_data['Inclinometer Sitting']),
        'kurtosis_inclinometer_lying': kurtosis(actigraphy_data['Inclinometer Lying']),
        'kurtosis_vector_magnitude': kurtosis(actigraphy_data['Vector Magnitude']),
        'iqr_axis1': np.percentile(actigraphy_data['Axis1'], 75) - np.percentile(actigraphy_data['Axis1'], 25),
        'iqr_axis2': np.percentile(actigraphy_data['Axis2'], 75) - np.percentile(actigraphy_data['Axis2'], 25),
        'iqr_axis3': np.percentile(actigraphy_data['Axis3'], 75) - np.percentile(actigraphy_data['Axis3'], 25),
        'iqr_steps': np.percentile(actigraphy_data['Steps'], 75) - np.percentile(actigraphy_data['Steps'], 25),
        'iqr_hr': np.percentile(actigraphy_data['HR'], 75) - np.percentile(actigraphy_data['HR'], 25),
        'iqr_inclinometer_off': np.percentile(actigraphy_data['Inclinometer Off'], 75) - np.percentile(actigraphy_data['Inclinometer Off'], 25),
        'iqr_inclinometer_standing': np.percentile(actigraphy_data['Inclinometer Standing'], 75) - np.percentile(actigraphy_data['Inclinometer Standing'], 25),
        'iqr_inclinometer_sitting': np.percentile(actigraphy_data['Inclinometer Sitting'], 75) - np.percentile(actigraphy_data['Inclinometer Sitting'], 25),
        'iqr_inclinometer_lying': np.percentile(actigraphy_data['Inclinometer Lying'], 75) - np.percentile(actigraphy_data['Inclinometer Lying'], 25),
        'iqr_vector_magnitude': np.percentile(actigraphy_data['Vector Magnitude'], 75) - np.percentile(actigraphy_data['Vector Magnitude'], 25),
        'mad_axis1': np.mean(np.abs(actigraphy_data['Axis1'] - np.mean(actigraphy_data['Axis1']))),
        'mad_axis2': np.mean(np.abs(actigraphy_data['Axis2'] - np.mean(actigraphy_data['Axis2']))),
        'mad_axis3': np.mean(np.abs(actigraphy_data['Axis3'] - np.mean(actigraphy_data['Axis3']))),
        'mad_steps': np.mean(np.abs(actigraphy_data['Steps'] - np.mean(actigraphy_data['Steps']))),
        'mad_hr': np.mean(np.abs(actigraphy_data['HR'] - np.mean(actigraphy_data['HR']))),
        'mad_inclinometer_off': np.mean(np.abs(actigraphy_data['Inclinometer Off'] - np.mean(actigraphy_data['Inclinometer Off']))),
        'mad_inclinometer_standing': np.mean(np.abs(actigraphy_data['Inclinometer Standing'] - np.mean(actigraphy_data['Inclinometer Standing']))),
        'mad_inclinometer_sitting': np.mean(np.abs(actigraphy_data['Inclinometer Sitting'] - np.mean(actigraphy_data['Inclinometer Sitting']))),
        'mad_inclinometer_lying': np.mean(np.abs(actigraphy_data['Inclinometer Lying'] - np.mean(actigraphy_data['Inclinometer Lying']))),
        'mad_vector_magnitude': np.mean(np.abs(actigraphy_data['Vector Magnitude'] - np.mean(actigraphy_data['Vector Magnitude']))),
    }
    return features

# Function to extract features from RR interval data
# The following features are extracted: Mean, Median, Variance, Standard Deviation, Maximum, Minimum, Entropy, Skew, Kurtosis, Interquartile range, and Mean Absolute Deviation
def extract_rr_features(rr_data):
    features = {
        'mean_ibi_s': np.mean(rr_data['ibi_s']),
        'median_ibi_s': np.median(rr_data['ibi_s']),
        'var_ibi_s': np.var(rr_data['ibi_s']),
        'std_ibi_s': np.std(rr_data['ibi_s']),
        'max_ibi_s': np.max(rr_data['ibi_s']),
        'min_ibi_s': np.min(rr_data['ibi_s']),
        'skew_ibi_s': skew(rr_data['ibi_s']),
        'kurtosis_ibi_s': kurtosis(rr_data['ibi_s']),
        'entropy_ibi_s': entropy(rr_data['ibi_s']),
        'iqr_ibi_s': np.percentile(rr_data['ibi_s'], 75) - np.percentile(rr_data['ibi_s'], 25),
        'mad_ibi_s': np.mean(np.abs(rr_data['ibi_s'] - np.mean(rr_data['ibi_s']))),
    }
    return features